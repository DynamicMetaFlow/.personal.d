:HIDDEN:
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>

#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>

#+PROPERTY: header-args :results silent :tangle personal-config.el
#+EXPORT_EXCLUDE_TAGS: noexport
#+HTML_HEAD_EXTRA: <style>div#content { max-width: 2000px; }</style>
:END:
#+TITLE: Personal Configuration
#+CATEGORY: emacs

* TODO Personal iConfiguration
** Modules
*** ACTIVE EXWM window manager
**** config
  #+BEGIN_SRC emacs-lisp
(use-package exwm
     :config
     (server-start)
     (require 'exwm)
     (require 'exwm-systemtray)
     (require 'exwm-randr)

     (display-time-mode t)
     (display-battery-mode nil)

     (setq use-dialog-box nil)
     (setq exwm-workspace-show-all-buffers nil)
     (setq exwm-layout-show-all-buffers nil)

     (setq exwm-workspace-index-map
           (lambda (index) (number-to-string (1- index))))

(setq exwm-workspace-index-map
      (lambda (index) (number-to-string (1+ index))))

(dotimes (i 10)
  (exwm-input-set-key (kbd (format "s-%d" i))
                      `(lambda ()
                         (interactive)
                         (exwm-workspace-switch-create (1- ,i)))))

(dotimes (i 10)
  (exwm-input-set-key (kbd (format "M-%d" i))
                      `(lambda ()
                         (interactive)
                         (exwm-workspace-move-window (1- ,i)))))

     (ido-mode 0)

     (setq display-time-default-load-average nil)

     (setq window-divider-default-bottom-width 2
           window-divider-default-right-width 2)

     (setq exwm-manage-configurations '((t char-mode t)))

     (setq exwm-workspace-number 10)

     (defvar exwm-toggle-workspace 0
       "Previously selected workspace. Used with `exwm-jump-to-last-exwm'.")

     (defun exwm-jump-to-last-exwm ()
       (interactive)
       (exwm-workspace-switch exwm-toggle-workspace))

     (defadvice exwm-workspace-switch (before save-toggle-workspace activate)
       (setq exwm-toggle-workspace exwm-workspace-current-index))

     (defun my/exwm-rename-buffer-to-title () (exwm-workspace-rename-buffer exwm-title))

     (add-hook 'exwm-update-title-hook 'my/exwm-rename-buffer-to-title)

     (add-hook 'exwm-floating-setup-hook 'exwm-layout-hide-mode-line)
     (add-hook 'exwm-floating-exit-hook 'exwm-layout-show-mode-line)

     (defun my-exwm-workspace-display-current ()
       "Display current workspace index."
       (interactive)
       (let ((message-log-max))
         (message (elt exwm-workspace--switch-history
                       exwm-workspace-current-index))))

     (add-hook 'exwm-workspace-switch-hook #'my-exwm-workspace-display-current)
     (advice-add 'exwm-workspace-add :after #'my-exwm-workspace-display-current)
     (advice-add 'exwm-workspace-delete :after #'my-exwm-workspace-display-current)


     (window-divider-mode))
    #+END_SRC
**** packages
***** xelb
  #+BEGIN_SRC emacs-lisp
   (use-package xelb)
  #+END_SRC
***** exwm-edit
  #+BEGIN_SRC emacs-lisp
   (use-package exwm-edit)
  #+END_SRC
**** keybindings
  #+BEGIN_SRC emacs-lisp
   (setq exwm-input-line-mode-passthrough t)

   (defun exwm-input-line-mode ()
     "Set exwm window to line-mode and show mode line"
     (call-interactively #'exwm-input-grab-keyboard)
     (exwm-layout-show-mode-line))

   (defun exwm-input-char-mode ()
     "Set exwm window to char-mode and hide mode line"
     (call-interactively #'exwm-input-release-keyboard)
     (exwm-layout-hide-mode-line))

   (defun exwm-input-toggle-mode ()
     "Toggle between line- and char-mode"
     (with-current-buffer (window-buffer)
       (when (eq major-mode 'exwm-mode)
         (if (equal (second (second mode-line-process)) "line")
             (exwm-input-char-mode)
           (exwm-input-line-mode)))))

   (defun exwm-input-set-global-key (key function)
     "Add KEY to `exwm-input-prefix-keys' and bind FUNCTION to KEY
        in exwm keymap"
     (cl-pushnew (elt key 0) exwm-input-prefix-keys)
     (exwm-input-set-key key function))

   (defun my/switch-to-last-buffer ()
     "Switch to last open buffer in current window."
     (interactive)
     (switch-to-buffer (other-buffer (current-buffer) 1)))

   (define-key minibuffer-inactive-mode-map [mouse-1] #'ignore)

   (push ?\s-  exwm-input-prefix-keys)

   (defvar exwm-input-prefix-keys-extra nil)

   (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)
   (define-key exwm-mode-map [?\C-c C-f] 'exwm-layout-set-fullscreen)
   (define-key exwm-mode-map [?\C-c C-h] 'exwm-floating-hide)
   (define-key exwm-mode-map [?\C-c C-k] 'exwm-input-release-keyboard)
   (define-key exwm-mode-map [?\C-c C-t C-f] 'exwm-floating-toggle-floating)
   (define-key exwm-mode-map [?\C-c C-t C-m] 'exwm-layout-toggle-mode-line)

   (setq exwm-input-simulation-keys
         '(
           ;; movement
           ([?\C-b] . [left])
           ([?\C-f] . [right])
           ([?\C-p] . [up])
           ([?\C-n] . [down])
           ([?\C-a] . [home])
           ([?\C-e] . [end])
           ([?\M-v] . [prior])
           ([?\C-v] . [next])
           ([?\C-d] . [delete])
           ([?\C-k] . [S-end delete])

           ;; cut/paste
           ([?\C-w] . [?\C-x])
           ([?\M-w] . [?\C-c])
           ([?\C-y] . [?\C-v])
           ;; search
           ([?\C-s] . [?\C-f])))

(defun my-exwm-keybindings ()
  "Add the key bindings for exwm."
  (exwm-input-set-key (kbd "<print>") #'desktop-environment-screenshot)

  (exwm-input-set-key (kbd "C-SPC")
                      (lambda ()
                        (interactive)
                        (exwm-input-line-mode)
                        (hydra-master/body)))

  (exwm-input-set-key (kbd "\\")
                      (lambda ()
                        (interactive)
                        (exwm-input-line-mode)
                        (boon-mode-hydra)))

  (exwm-input-set-key (kbd "<tab>")  'ivy-switch-buffer)

  (exwm-input-set-key (kbd "s-p")   'my/switch-to-last-buffer)
  (exwm-input-set-key (kbd "s-SPC") 'exwm-jump-to-last-exwm)

  (exwm-input-set-key (kbd "s-f")   'my/toggle-maximize)

  (exwm-input-set-key (kbd "s-f")   'my/toggle-maximize)

  (exwm-input-set-key (kbd "s-,")   'winner-undo)
  (exwm-input-set-key (kbd "s-.")   'winner-redo)

  (exwm-input-set-key (kbd "s-r") #'exwm-reset)
  (exwm-input-set-key (kbd "s-w") #'exwm-workspace-switch)

  (exwm-input-set-key (kbd "s-l") #'windmove-right)
  (exwm-input-set-key (kbd "s-k") #'windmove-left)
  (exwm-input-set-key (kbd "s-i") #'windmove-up)
  (exwm-input-set-key (kbd "s-o") #'windmove-down)


  (exwm-input-set-key (kbd "s-L") #'buf-move-right)
  (exwm-input-set-key (kbd "s-K") #'buf-move-left)
  (exwm-input-set-key (kbd "s-I") #'buf-move-up)
  (exwm-input-set-key (kbd "s-O") #'buf-move-down)

  (exwm-input-set-key (kbd "s-x") #'exwm-input-toggle-keyboard))

  #+END_SRC
**** randr
  #+BEGIN_SRC emacs-lisp
   (setq exwm-randr-workspace-output-plist '(1 "eDP1" 0 "HDMI2" 1 "VGA1"))

   (add-hook 'exwm-randr-screen-change-hook
               (lambda ()
                 (start-process-shell-command
                  "xrandr" nil "xrandr --output HDMI2 --left-of VGA1 --auto")))

  #+END_SRC
**** ibuffer
  #+BEGIN_SRC emacs-lisp
   (setq ibuffer-saved-filter-groups
     (quote (("default"
       ("EXWM" (mode . exwm-mode))))))
;       ("org-mode" (mode . org-mode))
;       ("git" (mode . magit-status-mode))
;       ("dired" (mode . dired-mode))
;       ("emacs" (or
 ;                (name . "^\\*scratch\\*$")
 ;                (name . "^\\*Messages\\*$")
 ;                (name . "^\\*Bookmark List\\*$")
 ;                (name . "^\\*GNU Emacs\\*$")))))))

   (add-hook 'ibuffer-mode-hook
             (lambda ()
               (ibuffer-switch-to-saved-filter-groups "default")))


   (define-ibuffer-column size-h
     (:name "Size")
     (cond
      ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
      ((> (buffer-size) 100000) (format "%7.0fk" (/ (buffer-size) 1000.0)))
      ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
      (t (format "%8d" (buffer-size)))))

   (define-ibuffer-column exwm-class
     (:name "Class")
     (cond
      (exwm-class-name (format "%s" exwm-class-name))
      (t (format "%s" ""))))

   ;; Needs work to look good, major-mode is not equal to ibuffer-formats mode
   (define-ibuffer-column exwm-mode
     (:name "EXWM-Mode")
     (cond
      ((string-equal major-mode "exwm-mode") (format "%s" exwm-class-name))
      (t (format "%s" mode-name))))

   (setq ibuffer-formats
         '((mark modified read-only locked " "
                 (name 50 50 :left :elide)
                 " "
                 (size-h 16 16 :right)
                 " "
                 (exwm-mode 18 18 :left :elide)
                 " " filename-and-process)
           (mark modified read-only locked " "
                 (name 50 50 :left :elide)
                 " "
                 (size-h 16 16 :right)
                 " "
                 (mode 18 18 :left :elide)
                 (exwm-class 18 18 :left :elide)
                 " " filename-and-process)
           (mark " "
                 (name 16 -1)
                 " " filename)))

(defun my-counsel-ibuffer-by-exwm-class-name ()
     "`counsel-ibuffer' limited to Exwm buffers of same X class."
     (interactive)
     (require 'ibuffer)
     (cl-letf*
         ((class-name exwm-class-name)
          (get-buffers-function
           (symbol-function 'counsel-ibuffer--get-buffers))
          ((symbol-function 'counsel-ibuffer--get-buffers)
           (lambda ()
             (--filter (with-current-buffer (cdr it)
                         (and (eq major-mode 'exwm-mode)
                              (string-equal exwm-class-name class-name)))
                       (funcall get-buffers-function)))))
       (counsel-ibuffer)))

  #+END_SRC
**** autostart
  #+BEGIN_SRC emacs-lisp
   (defun app/autostart (application)
     "Add an application to autostart."
     (add-hook 'exwm-init-hook
               `(lambda ()
                  (start-process-shell-command "autostart-process" nil ,application))))

   (defun my-exwm-autostart ()
     "Add applications that will be loaded after exwm init is done."
     (mapcar (lambda (program) (app/autostart program)) exwm-autostart))


   (setq exwm-autostart
         (list
          "nm-applet"
          "compton -b"
          "volumeicon"
          "thinkpad-touchpad off"
          "/usr/bin/dunst"
          "/usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1"
          "pamac-tray"
          "autorandr --change"
          "redshift-gtk"
          ))


   (add-hook 'after-init-hook
             (lambda ()
               (my-exwm-autostart)
               (exwm-systemtray-enable)
;               (exwm-nw-mode)
               (exwm-randr-enable)
               (exwm-input--update-global-prefix-keys)
               (my-exwm-keybindings)
               (exwm-init))
             t)
  #+END_SRC
*** ACTIVE boon
**** package
  #+BEGIN_SRC emacs-lisp
  (use-package boon :ensure t)
  #+END_SRC
**** boon-modes
#+BEGIN_SRC emacs-lisp
(defvar-local boon-objed-state nil "Non-nil when boon objed mode is activated.")

  (defun boon-reset-all-mode-states ()
    (interactive)
    (mapcar (lambda (boon-mode)
              (setq boon-mode nil)) boon-mode-map-alist))

  (defun boon-set-objed-state ()
    "Switch to objed state."
    (boon-set-state 'boon-objed-state))

  (defun boon-detect-mode (boon-mode-map)
    (let ((boon-mode-command (cdr (assoc major-mode boon-mode-map))))
      (if boon-mode-command (apply boon-mode-command))))

  (defun boon-select-major-mode (boon-mode-map)
    (let ((boon-mode-command (cdr (assoc major-mode boon-mode-map))))
      (if boon-mode-command (apply boon-mode-command))))

  (defun boon-mode-hydra ()
    (interactive)
    (boon-select-major-mode boon-major-mode-hydra-list))

(setq boon-key-list '
        ((org-mode . (message "%s" "command from org mode"))
         (lisp-mode . (message "%s" "command from lisp mode"))
         (python-mode . (message "%s" "command from python mode"))))

  (setq boon-major-mode-hydra-list '
        ((org-mode . (hydra-org/body))
         (emacs-lisp-mode . (hydra-lisp/body))
         (clojure-mode . (hydra-clojure/body))
         (clojurescript-mode . (hydra-clojurescript/body))
         (js2-mode . (hydra-javascript/body))
         (rjsx-mode . (hydra-rjsx/body))
         (json-mode . (hydra-json/body))
         (sql-mode . (hydra-sql/body))
         (css-mode . (hydra-css/body))
         (scss-mode . (hydra-scss/body))
         (javascript-mode . (hydra-javascript/body))
         (yaml-mode . (hydra-yaml/body))
         (php-mode . (hydra-php/body))
         (c++-mode . (hydra-c/body))
         (arduino-mode . (hydra-arduino/body))
         (web-mode . (hydra-web/body))
         (html-mode . (hydra-html/body))
         (mhtml-mode . (hydra-html/body))
         (exwm-mode . (hydra-exwm/body))
         (python-mode . (hydra-python/body))))

(custom-set-variables
   '(boon-special-mode-list
     (quote
      (
       ediff-mode
       magit-mode
       magit-popup-mode
       debugger-mode
       ediff-mode
       git-rebase-mode
       mu4e-headers-mode
       mu4e-view-mode
       help-mode
       org-agenda-mode
       emms-playlist-mode
       ,*dashboard*
       ))))

#+END_SRC
**** Keybindings
#+BEGIN_SRC emacs-lisp
(boon-mode)

(define-key boon-command-map (kbd "SPC") 'counsel-M-x)
(define-key boon-command-map (kbd "RET") 'counsel-linux-app)

(define-key boon-command-map (kbd "@")  'objed-mode)

(define-key boon-command-map (kbd "<tab>")  '("b Buffer list" . ivy-switch-buffer))
(define-key boon-command-map (kbd "/")  'hui-search-web)

(define-key boon-command-map (kbd "a")  'hydra-agenda/body)
(define-key boon-command-map (kbd "b")  '("b Buffer list" . counsel-switch-buffer))
(define-key boon-command-map (kbd "c")  'boon-c-god)
(define-key boon-command-map (kbd "C")  'hydra-copy/body)
(define-key boon-command-map (kbd "d")  'hydra-delete/body)
; (define-key boon-command-map (kbd "e")   'hydra-emacs/body)
(define-key boon-command-map (kbd "f")  'hydra-file/body)
;(define-key boon-command-map (kbd "g")  'hydra-bookmarks/body)
(define-key boon-command-map (kbd "g") '("g magit" . magit-status))
(define-key boon-command-map (kbd "h")  'avy-goto-char)
; (define-key boon-command-map (kbd "H")   'hydra-help/body)
(define-key boon-command-map (kbd "i")  'my/insert-mode)
(define-key boon-command-map (kbd "j")  'hydra-jump/body)
;(define-key boon-command-map (kbd "k"))
;(define-key boon-command-map (kbd "l"))
(define-key boon-command-map (kbd "m")  'boon-mode-hydra)
(define-key boon-command-map (kbd "M")  'hydra-minor/body)
(define-key boon-command-map (kbd "n")  'hydra-narrow/body)
(define-key boon-command-map (kbd "o")  'my/objed-mode)
(define-key boon-command-map (kbd "p")  'kmacro-end-or-call-macro)
(define-key boon-command-map (kbd "P")  'hydra-paste/body)
(define-key boon-command-map (kbd "q")  'kill-buffer)
(define-key boon-command-map (kbd "r")  'kmacro-start-macro)
(define-key boon-command-map (kbd "R")  'hydra-register/body)
(define-key boon-command-map (kbd "s")  'hydra-search/body)
(define-key boon-command-map (kbd "S")  'ivy-resume)
(define-key boon-command-map (kbd "t")  'hydra-torus/body)
(define-key boon-command-map (kbd "u")  'undo)
(define-key boon-command-map (kbd "v")  'hydra-select/body)
(define-key boon-command-map (kbd "w")  'hydra-window/body)
;  (define-key boon-command-map (kbd "W")   'hydra-wrap/body)
(define-key boon-command-map (kbd "x")  'boon-x-map)
(define-key boon-command-map (kbd "y")  '("p paste/yank" . yank))
(define-key boon-command-map (kbd "z")  'ivy-resume)

(define-key global-map [escape]  'my/boon-set-command-state)



#+END_SRC

*** ACTIVE objed
 #+BEGIN_SRC emacs-lisp
  (use-package objed)

(define-key objed-user-map "f" nil)
(define-key objed-user-map "fd" 'xref-find-definitions)
(define-key objed-user-map "fr" 'xref-find-references)
 #+END_SRC
*** ACTIVE torus
 #+BEGIN_SRC emacs-lisp
    (use-package torus
      :init
  (defun torus-read (filename)
    "Read main torus variables from FILENAME as Lisp code."
    (interactive
     (list
      (read-file-name
       "Torus file : "
       (file-name-as-directory torus-dirname))))
    (let*
        ((file-basename (file-name-nondirectory filename))
         (minus-len-ext (- (min (length torus-extension)
                                (length filename))))
         (buffer))
      (unless (equal (cl-subseq filename minus-len-ext) torus-extension)
        (setq filename (concat filename torus-extension)))
      (when (torus--update-input-history file-basename)
        (if (file-exists-p filename)
            (progn
              (setq buffer (find-file-noselect filename))
              (eval-buffer buffer)
              (kill-buffer buffer))
          (message "File %s does not exist." filename))))
    ;; Also saved in file
    ;; (torus--update-meta)
    ;; (torus--build-index)
    ;; (torus--build-meta-index)
    (torus--jump))
      (setq torus-prefix-key (kbd "C-x t"))

      :bind-keymap ("C-x t" . torus-map)
      :bind (
             :map torus-map
             ("t" . torus-copy-to-circle))
      :hook ((emacs-startup . torus-start)
             (kill-emacs . torus-quit))
      :custom (
               (torus-binding-level 1)
               (torus-verbosity 1)
               (torus-dirname (concat user-emacs-directory (file-name-as-directory "torus")))
               (torus-load-on-startup t)
               (torus-save-on-exit t)
               (torus-autoread-file (concat torus-dirname "last.el"))
               (torus-autowrite-file torus-autoread-file)
               (torus-backup-number 5)
               (torus-history-maximum-elements 30)
               (torus-maximum-horizontal-split 3)
               (torus-maximum-vertical-split 4)
               (torus-display-tab-bar t)
               (torus-separator-torus-circle " >> ")
               (torus-separator-circle-location " > ")
               (torus-prefix-separator "/")
               (torus-join-separator " & "))
      :config
      (torus-init)
      (torus-install-default-bindings)
    )

 #+END_SRC

*** ACTIVE emms
 #+BEGIN_SRC emacs-lisp
 (use-package emms
 :ensure t
 :config
 (require 'emms)
    (emms-all)
    (emms-default-players)
    (setq emms-source-file-default-directory "/home/alexander/org/data/c0/80320c-060b-4348-a413-ee7d8ed40dd6/")

    (setq emms-playlist-buffer-name "*Music*")
    (setq emms-info-asynchronously t)
    (setq emms-info-functions '(emms-info-libtag))
    (emms-mode-line 0)
    (emms-playing-time 1))
 #+END_SRC

*** ACTIVE pdf-tools
  #+BEGIN_SRC emacs-lisp
(use-package pdf-tools :ensure t
  :config
  (unless noninteractive
    (pdf-tools-install))
  (setq-default pdf-view-display-size 'fit-page))
  #+END_SRC

*** ACTIVE hyperbole
 #+BEGIN_SRC emacs-lisp
(use-package hyperbole
  :ensure t
  :config
  (defun goto-button (heading loc)
    (widen)
    (goto-char(point-min))
    (search-forward-regexp heading)
    (org-narrow-to-subtree)
    (search-forward-regexp loc)
    (recenter-top-bottom))

  (defun my/avy-goto-jump (char &optional arg)
    "Jump to the currently visible CHAR.
  The window scope is determined by `avy-all-windows' (ARG negates it)."
    (interactive (list (read-char "char: " t)
                       current-prefix-arg))

    (avy-with avy-goto-char
      (avy-jump
       (if (= 13 char)
           "\n"
         (regexp-quote (string char)))
       :window-flip arg))
    (hkey-either arg))

  )


 #+END_SRC
*** ACTIVE howm
**** functions
   #+BEGIN_SRC emacs-lisp
(defvar howm-view-title-header "#+TITLE:")

(defvar howm-view-header-format
  "\n\n#+INCLUDE: %s\n")

(setq howm-template-rules
      '(("%title" . howm-template-title)
        ("%date" . howm-template-date)
        ("%file" . howm-template-previous-file)
        ("%parent" . howm-template-parent)
        ("%fname" . howm-template-filename)
        ("%cursor" . howm-template-cursor)))

(defun howm-template-title (arg)
  (insert (cdr (assoc 'title arg))))

(defun howm-template-filename (arg)
  (insert (concat ">>>" (file-name-base buffer-file-name))))

(defun howm-template-parent (arg)
  (insert (cdr (assoc 'parent arg))))

(defun howm-template-date (arg)
  (insert (cdr (assoc 'date arg))))

(defun howm-template-previous-file (arg)
  (insert (cdr (assoc 'file arg))))

(defun howm-template-cursor (arg))

(setq howm-file-name-format "%Y-%m-%dT%H.%M.%S.org")
(setq howm-template-date-format "#+DATE: [%Y-%m-%d %H:%M]")
(setq howm-directory "~/org/notes/")
(setq howm-view-preview-narrow nil)

(add-hook 'org-mode-hook 'howm-mode)
(add-to-list 'auto-mode-alist '("\\.howm$" . org-mode))



(setq howm-view-split-horizontally t)
(setq howm-view-keep-one-window t)

(setq howm-menu-refresh-after-save nil)
(setq howm-menu-expiry-hours 6)  ;; cache menu N hours
(setq howm-menu-file "0000-00-00-000000.txt")  ;; don't *search*

(setq howm-view-use-grep t)
(setq howm-view-grep-command "rg")
(setq howm-view-grep-option "-nH --no-heading --color never")
(setq howm-view-grep-extended-option nil)
(setq howm-view-grep-fixed-option "-F")
(setq howm-view-grep-expr-option nil)
(setq howm-view-grep-file-stdin-option nil)

;; howm-menu
(defun howm-menu-with-j1 (orig-fun &rest args)
  (setq howm-view-grep-option "-nH --no-heading -j1 --color never")
  (apply orig-fun args)
  (setq howm-view-grep-option "-nH --no-heading --color never"))

(advice-add 'howm-menu-refresh :around #'howm-menu-with-j1)

(setq howm-view-search-in-result-correctly t)

(setq howm-view-list-title-type 2)
(setq howm-view-summary-format "")

(defun howm-search-title (title)
  (interactive "sSearch title: ")
  (message title)
  (howm-search (format "^* +%s" (regexp-quote title)) nil))

(defun howm-list-grep-in-new-frame (&optional completion-p)
  (interactive "P")
  (select-frame (make-frame))
  (howm-list-grep completion-p))

(defvar *howm-new-frame* nil)

(defun howm-new-frame ()
  (when *howm-new-frame*
    (select-frame (make-frame))))
(add-hook 'howm-view-before-open-hook 'howm-new-frame)

(defun howm-open-new-frame (opener)
  ;; move cursor back from contents to summary in the original frame
  (let (new-frame)
    (save-window-excursion
      (let ((*howm-new-frame* t))
        (funcall opener))
      (setq new-frame (selected-frame)))
    (select-frame new-frame)))

(defun howm-open-new-frame-summary ()
  (interactive)
  (howm-open-new-frame #'howm-view-summary-open-sub))

(defun howm-open-new-frame-contents ()
  (interactive)
  (howm-open-new-frame #'howm-view-contents-open-sub))


(defun howm-create-and-link (&optional which-template)
  (interactive "p")
  (let ((b (current-buffer))
        (p (point)))
    (prog1
        (howm-create which-template)
      (let ((f (buffer-file-name)))
        (when (and f (buffer-file-name b))
          (with-current-buffer b
            (goto-char p)
            (insert (format howm-template-file-format
                            (abbreviate-file-name f))
                    "\n")))))))

(defun howm-open-from-calendar ()
  (interactive)
  (require 'howm-mode)
  (let* ((mdy (calendar-cursor-to-date t))
         (m (car mdy))
         (d (second mdy))
         (y (third mdy))
         (ti (encode-time 0 0 0 d m y))
         (pc (howm-folder-get-page-create howm-directory (howm-file-name ti)))
         (page (car pc))
         (createp (cdr pc)))
    (other-window 1)
    (howm-page-open page)
    (if createp
        (howm-create-here)
      (howm-set-mode))))
(require 'calendar)


(defun my-howm-switch-to-summary ()
  (interactive)
  (switch-to-buffer "*howmS*")
  (riffle-summary-check t))

(add-hook 'howm-view-contents-mode-hook
          (lambda ()
            (setq default-directory howm-directory)
            (howm-mode 1)))
(defadvice riffle-contents-show (around howm-mode (item-list) activate)
  ad-do-it
  (when howm-mode
    (howm-initialize-buffer)))


(defun howm-export-to-org ()
  "Remove formatting and export to plain text
  when in howmC view"
  (interactive)
  (copy-whole-buffer-to-clipboard)
  (find-file   (concat "~/notes_export_" (format-time-string "%m-%d-%H%M%S") ".org"))
  (yank)
  (goto-char(point-min))
  (replace-string  "#+TITLE: "  "* ")
  (goto-char(point-min))
  (replace-string "#+DATE: " "")
  (goto-char(point-min))
  (replace-string "#+KEYWORDS: " "")
  (goto-char(point-min))
  (replace-regexp "^==========================>>> .*$" ""))


(defun howm-insert-filename ()
  (interactive)
  (insert (concat ">>>" (file-name-base buffer-file-name))))


(defun howm-create (&optional which-template here)
  (interactive "p")
  (let* ((t-c (howm-create-default-title-content))
         (title (car t-c))
         (content (cdr t-c)))
    (howm-create-file-with-title title which-template nil here content)
    (org-cycle '(16))
    ))


(defun my/howm-view-brain ()
  (interactive)
  (howm-view-summary-open)
  (my/org-brain-visualize-current))

(defun my/howm-view-summary-open ()
  (interactive)
  (howm-view-summary-open)
  (delete-other-windows))


(defun my/howm-view-summary-open ()
  (interactive)
  (howm-view-summary-open)
  (org-cycle '(16)))

(defun howm-friendship-to ()
  (interactive)
  (howm-create)
  (org-brain-add-friendship)
  (search-forward "#+TITLE:")
  (org-cycle '(16)))

(defun howm-parent-to ()
  (interactive)
  (howm-create)
  (org-brain-add-child)
  (search-forward "#+TITLE:")
  (org-cycle '(16)))


(defun howm-child-to ()
  (interactive)
  (howm-create)
  (org-brain-add-parent)
  (search-forward "#+TITLE:")
  (org-cycle '(16))

  )

(defun howm-org-include-file ()
  (interactive)
  (save-excursion
    (setq current-buffer buffer-file-name)
    (switch-to-buffer "*scratch*")
    (insert "\n\n")
    (insert "#+INCLUDE: \"" current-buffer "\" :only-contents t :lines \"10-\"\n\n")))


   #+END_SRC
**** package
    #+BEGIN_SRC emacs-lisp
(use-package howm
  :demand t
  :init
  (setq howm-template
":HIDDEN:
,#+PARENTS:
,#+CHILDREN:
,#+FRIENDS:

:RELATED:
%file
%title

:RESOURCES:

:END:
,#+TITLE: %cursor
%fname
%date
,#+CATEGORY:
,#+KEYWORDS:

  ")

:config
(define-key howm-view-summary-mode-map (kbd "M-C-m") 'howm-open-new-frame-summary)
(define-key howm-view-summary-mode-map [tab] 'my/howm-view-summary-open))


    #+END_SRC
*** ACTIVE hydra
**** package
   #+BEGIN_SRC emacs-lisp
(use-package hydra
  :ensure t
  :defer 0.1
  :init
  (define-key boon-moves-map  (kbd "SPC") 'hydra-master/body)
  :config

  (defun counsel-projectile-switch-to-buffer-other-window ()
    "Jump to a buffer in the current project."
    (interactive)
    (other-window 1)
    (counsel-projectile-switch-to-buffer))

  (defun counsel-projectile-find-dir-other-window ()
    "Jump to a buffer in the current project."
    (interactive)
    (other-window 1)
    (counsel-projectile-find-dir))

  (defun counsel-projectile-find-file-other-window ()
    "Jump to a buffer in the current project."
    (interactive)
    (other-window 1)
    (counsel-projectile-find-file))

  (defun counsel-projectile-find-file-dwim-other-window ()
    "Jump to a buffer in the current project."
    (interactive)
    (other-window 1)
    (counsel-projectile-find-file-dwim))

  (setq lv-use-separator t)
  (set-face-attribute 'hydra-face-blue nil :foreground "deep sky blue" :weight 'bold))
   #+END_SRC
**** common
    #+BEGIN_SRC emacs-lisp
(eval-and-compile
  (defhydra hydra-common  (
                           :color blue
                           :hint nil
                           :pre (progn
                                  (exwm-input-line-mode))
                           :post (progn
                                   (exwm-input-char-mode)))
    ("RET"   counsel-linux-app nil)
    ("SPC" counsel-M-x nil)
    ("<tab>" ivy-switch-buffer "switch buffer")
    ("DEL"   hydra-master/body nil)
    ("c"   counsel-org-capture "capture")

    ("w"   hydra-window/body "window")

    ("M"   hydra-minor/body nil)
    ("m"   boon-mode-hydra nil)
    ("q"   nil)


    ("0" delete-window)
    ("1" my/toggle-maximize)
    ("2" split-window-below)
    ("3" split-window-right)
    ("4" split-window-up)
    ("5" split-window-left)

    (";" ace-swap-window "swap")
    ("@" hycontrol-windows-grid)


    ))
    #+END_SRC
***** window
    #+BEGIN_SRC emacs-lisp
(defhydra hydra-window (
                        :color red
                        :hint  nil
                        :inherit (hydra-common/heads)
                        :pre (progn
                               (exwm-input-line-mode))
                        :post (progn
                                (exwm-input-char-mode))
                        )
  "
                                                                     ╭──────────┐
  Window       Workspace        Switch                               │  Window  │
╭────────────────────────────────────────────────────────────────────┴──────────╯
     ↑         [_ss_] switch     [_sb_] ibuffer
     _i_         [_sm_] move       [_sp_] projectile
 ← _k_   _l_ →                     [_se_] exwm
     _o_
     ↓

   ^ ^
--------------------------------------------------------------------------------
    "
  ("i" windmove-up)
  ("o" windmove-down)
  ("k" windmove-left)
  ("l" windmove-right)

  ("I" buf-move-up)
  ("O" buf-move-down)
  ("K" buf-move-left)
  ("L" buf-move-right)

  ("sp" counsel-projectile-switch-to-buffer)
  ("se" my-counsel-ibuffer-by-exwm-class-name)
  ("sb" ibuffer)

  ("ss" exwm-workspace-switch)
  ("sm" exwm-workspace-move-window)


  )
    #+END_SRC
****** torus
     #+BEGIN_SRC emacs-lisp
(defhydra hydra-torus (
                       :color red
                       :hint nil
                       :inherit (hydra-common/heads)
                       :pre (progn
                              (exwm-input-line-mode))
                       :post (progn
                               (exwm-input-char-mode)))
  "
                                                                                           ╭─────────┐
    Switch                    Move                        Do                               │  Torus  │
╭──────────────────────────────────────────────────────────────────────────────────────────┴─────────╯
  [_sc_] circle          [_<up>_]  prev-location         [_#_]  layout            [_ss_] search
  [_sl_] location       [_<down>_] next-location         [_ac_] add-circle        [_sh_] search-history
  [_st_] torus                                         [_al_] add-location
                     [_<left>_]  prev-circle
  [_!_] alt-circle     [_<right>_] next-circle          [_dc_] delete-circle
  [_<_] alt-circles                                   [_dl_] delete-location
  [_>_] alt-torus      [_<prior>_] newer-history
                     [_<next>_]  older-history
   ^ ^
-------------------------------------------------------------------------------------------------------
    "

("#" torus-layout-menu)

("sc" torus-switch-circle)
("sl" torus-switch-location)
("st" torus-switch-torus)

("ac" torus-add-circle)
("al" torus-add-location)

("dl" torus-delete-location)
("dc" torus-delete-circle)

("<up>"   torus-previous-location)
("<down>" torus-next-location)
("<left>" torus-previous-circle)
("<right>" torus-next-circle)


("ss" torus-search)
("sh" torus-search-history)

("<prior>" torus-history-newer)
("<next>" torus-history-older)

("!" torus-alternate-in-same-torus)
("<" torus-alternate-circles)
(">" torus-alternate-in-same-circle)
)

     #+END_SRC
****** bookmarks
     #+BEGIN_SRC emacs-lisp
(defhydra hydra-bookmarks (
                           :color red
                           :hint nil
                           :inherit (hydra-common/heads)
                           :pre (progn
                                  (exwm-input-line-mode))
                           :post (progn
                                   (exwm-input-char-mode)))

  "
                                                                   ╭───────────┐
       List                          Do                            │ Bookmarks │
╭──────────────────────────────────────────────────────────────────┴───────────╯
  [_l_] list bookmarks            [_j_] jump to a bookmark
   ^ ^                            [_m_] set bookmark at point
   ^ ^                            [_s_] save bookmarks
--------------------------------------------------------------------------------
    "
  ("l" counsel-bookmark)
  ("j" bookmark-jump)
  ("m" bookmark-set)
  ("s" bookmark-save))
     #+END_SRC
***** jump
     #+BEGIN_SRC emacs-lisp
(defhydra hydra-jump (:color blue :hint nil :inherit (hydra-common/heads)
                             :pre (progn
                                    (exwm-input-line-mode))
                             :post (progn
                                     (exwm-input-char-mode)))
  "
                                                                        ╭──────┐
  Window          WordChar        Line         iSearch                  │ Jump │
╭───────────────────────────────────────────────────────────────────────┴──────╯
  [_w_] jump        [_j_] word         [_l_] jump     [_i_] jump
  [_d_] close       [_p_] all words    [_y_] copy
  [_z_] maximize    [_b_] subword      [_m_] move
  [_s_] swap        [_c_] char         [_v_] copy region
   ^ ^              [_a_] two chars
--------------------------------------------------------------------------------
      "
  ("w" ace-window)
  ("d" ace-delete-window)
  ("z" ace-maximize-window)
  ("s" ace-swap-window)
  ("j" avy-goto-word-1)
  ("p" avy-goto-word-0)
  ("b" avy-goto-subword-0)
  ("c" avy-goto-char)
  ("a" avy-goto-char-2)
  ("l" avy-goto-line)
  ("y" avy-copy-line)
  ("m" avy-move-line)
  ("v" avy-copy-region)
  ("i" avy-isearch)
)
     #+END_SRC
****** register
     #+BEGIN_SRC emacs-lisp
(defhydra hydra-register (:color blue :hint nil :inherit (hydra-common/heads)
                                 :pre (progn
                                        (exwm-input-line-mode))
                                 :post (progn
                                         (exwm-input-char-mode)))

  "
                                                                        ╭──────────┐
       Logs                        Registers                Undo        │ Register │
    ╭───────────────────────────────────────────────────────────────────┴──────────╯
      [_c_] commands history       [^e^] emacs registers    [_u_] undo tree
      [_o_] messages               [_r_] evil registers
      [_l_] lossage (keystrokes)   [_m_] evil marks
      [_d_] diff buffer with file  [_k_] kill ring
    --------------------------------------------------------------------------------
          "
  ("d" joe-diff-buffer-with-file)
  ("k" counsel-yank-pop)
  ("l" view-lossage)
  ("c" counsel-command-history)
  ("m" evil-show-marks)
  ("o" view-echo-area-messages)
  ("r" evil-show-registers)
  ("u" undo-tree-visualize))
     #+END_SRC

***** search
    #+BEGIN_SRC emacs-lisp
(defhydra hydra-search (:color blue :hint nil :inherit (hydra-common/heads)
                               :pre (progn
                                      (exwm-input-line-mode))
                               :post (progn
                                       (exwm-input-char-mode)))
  "
                                                                          ╭────────┐
       Files                             Buffer                           │ Search │
    ╭─────────────────────────────────────────────────────────────────────┴────────╯
      [_a_] regex search (Ag)           [_b_] by word
      [_r_] regex search (rg)           [_o_] by word (opened buffers)
      [_p_] regex search (pt)           [_w_] by word (multi)
      [_g_] regex search (grep)         [_h_] by word (grep or swiper)
      [^f^] find                        [_t_] tags & titles
      [_l_] locate                      [_s_] semantic
    --------------------------------------------------------------------------------
          "
  ("a" (let ((current-prefix-arg "-."))
         (call-interactively 'counsel-ag)))
  ("r" (let ((current-prefix-arg "-."))
         (call-interactively 'counsel-rg)))
  ("p" (let ((current-prefix-arg "-."))
         (call-interactively 'counsel-pt)))
  ("g" rgrep)
  ("l" counsel-locate)
  ("b" swiper)
  ("o" swiper-all)
  ("h" counsel-grep-or-swiper)
  ("t" counsel-imenu)
  ("s" counsel-semantic)
  ("w" swiper-multi))

    #+END_SRC
***** major-mode-hydras
****** hydra-org
    #+BEGIN_SRC emacs-lisp :results silent
  (defhydra hydra-org (:exit t :columns 4
:inherit (hydra-common/heads))

    "Org mode"
    ("u" org-up-element "Up element")
    ("d" org-down-element "Down element")
    ("b" org-next-block "Next block")
    ("e" org-export-dispatch "Export")
    ("t" org-todo "Toggle todo states")
    ("T" org-babel-tangle "Tangle code")
    ("c" org-babel-execute-src-block "Run block")
    ("," outline-show-children "Show node children")
    ("." org-tree-to-indirect-buffer "Edit in buffer")
    ("'" org-edit-special "Code buffer"))
    #+END_SRC
****** hydra-python
   #+BEGIN_SRC emacs-lisp :results silent
  (with-no-warnings
  (defhydra hydra-python (:exit t :columns 4)
    "Python"
    ("#" poporg-dwim "Edit Comment")
    ("," dumb-jump-back "Jump back")
    ("." dumb-jump-go "Jump to definition")
    ("D" hydra-python-django/body "Django")
    ("L" flycheck-prev-error "Prev lint error")
    ("T" pythonic-tests-all "Run pythonic test")
    ("a" pytest-all "Run all tests")
    ("b" python-shell-send-buffer "Send buffer to python")
    ("u" em-python-pur "Upgrade pip requirements")
    ;;("r" python-shell-send-buffer "Send line/region to python")
    ("r" run-python "REPL")
;    ("d" helm-dash-at-point "Docs")
    ("c" em-python-execute "Compile / Execute")
    ("i" dumb-jump-quick-look "Definition Info")
    ("l" flycheck-next-error "Next lint error")
    ("t" pythonic-tests-run "Run current test")
    ("V" flycheck-verify-setup "Verify linting")
    ("v" em-python-environment "Check environment")
    ("s" isortify-buffer "Sort imports")
    ;;("n" flyceck "Run all tests")
    ("f" blacken-buffer "Format buffer code")))
   #+END_SRC
****** hydra-lisp
   #+BEGIN_SRC emacs-lisp
  (defhydra hydra-lisp (:exit t :columns 4)
    "Lisp"
    ("r" ielm "Interactive REPL")
    ("." dumb-jump-go "Jump definition")
    ("v" flycheck-verify-setup "Verify linting")
    ("f" elisp-format-buffer "Format buffer")
    ("d" checkdoc "Lint doc strings")
    ("l" package-lint-current-buffer "Lint code")
    ("c" emacs-lisp-byte-compile-and-load "Lisp execute"))
   #+END_SRC
****** hydra-javascript
   #+BEGIN_SRC emacs-lisp
  (defhydra hydra-javascript (:exit t :columns 4)
    "Javascript"
    ("," dumb-jump-back "Jump back")
    ("." dumb-jump-go "Jump to definition")
    ("l" flycheck-next-error "Next lint error")
    ("i" npm-mode-npm-init "Initialize NPM")
    ("f" prettier-js "Format code")
    ("v" flycheck-verify-setup "Verify linting"))
   #+END_SRC
****** hydra-rjsx
   #+BEGIN_SRC emacs-lisp
  (defhydra hydra-rjsx (:exit t :columns 4)
    "Javascript"
    ("," dumb-jump-back "Jump back")
    ("." dumb-jump-go "Jump to definition")
    ("l" flycheck-next-error "Next lint error")
    ("i" npm-mode-npm-init "Initialize NPM")
    ("f" prettier-js "Format code")
    ("r" indium-connect "REPL")
    ("h" html-to-react "HTML to react")
    ("v" flycheck-verify-setup "Verify linting"))

   #+END_SRC

****** hydra-css
    #+BEGIN_SRC emacs-lisp
  (defhydra hydra-css (:exit t :columns 4)
    "Css"
    ("," dumb-jump-back "Jump back")
    ("." dumb-jump-go "Jump to definition")
    ("f" web-beautify-css "Format css"))
    #+END_SRC
****** hydra-scss
    #+BEGIN_SRC emacs-lisp
  (defhydra hydra-scss (:exit t :columns 4)
    "Scss"
    ("," dumb-jump-back "Jump back")
    ("." dumb-jump-go "Jump to definition")
    ("f" web-beautify-css "Format css"))
    #+END_SRC
****** hydra-web
    #+BEGIN_SRC emacs-lisp
  (defhydra hydra-web (:exit t :columns 4)
    "Web"
    ("f" web-beautify-html "Format buffer")
    ("o" browser-url-of-buffer "Open in browser"))
   #+END_SRC
****** hydra-html
    #+BEGIN_SRC emacs-lisp
  (defhydra hydra-html (:exit t :columns 4)
    "Html"
    ("f" web-beautify-html "Format buffer")
    ("o" browser-url-of-buffer "Open in browser"))
     #+END_SRC

****** hydra-c
     #+BEGIN_SRC emacs-lisp
  (defhydra hydra-c (:exit t :columns 4)
    "C"
    ("." dumb-jump-go "Jump to definition")
    ("," dumb-jump-back "Jump back")
    ("i" dumb-jump-quick-look "Definition Info")
    ("f" clang-format-buffer "Format buffer"))
     #+END_SRC
****** hydra-json
   #+BEGIN_SRC emacs-lisp
  (with-no-warnings
  (defhydra hydra-json (:exit t :columns 4)
    "CSV"
    (";" yafolding-toggle-all "Fold")
    ("f" csv-align-fields "Format visually")))
   #+END_SRC
****** hydra-exwm
     #+BEGIN_SRC emacs-lisp
  (defhydra hydra-exwm (:exit t
                        :columns 4
                        :color blue
                        :inherit (hydra-common/heads)
                        :pre (progn
                               (exwm-input-line-mode))
                        :post (progn
                                (exwm-input-char-mode)))

    "EXWM"
    ("b"  #'my-counsel-ibuffer-by-exwm-class-name "exwm buffers")
    ("s"  #'exwm-input-send-next-key "send key")
    ("f"  #'exwm-layout-set-fullscreen "fullscreen")
    ("t"  #'exwm-floating-toggle-floating "toggle floating")

)
     #+END_SRC
**** master
   #+BEGIN_SRC emacs-lisp
(defhydra hydra-master (
                        :color blue
                        :pre (progn
                               (exwm-input-line-mode))
                        :post (progn
                                (exwm-input-char-mode))
                        :inherit (hydra-common/heads))
"
                                                                         ╭───────┐
                                                                         │ Home  │
╭────────────────────────────────────────────────────────────────────────┴───────╯
  [_a_] Agenda   [_p_] Projects   [_f_] Files   [_e_] Emacs

-----------------------------------------------------------------------------------
      "
      ("a" hydra-agenda/body nil)
      ("p" hydra-projects/body nil)
      ("f" hydra-file/body nil)
      ("e" hydra-emacs/body nil)
)
     #+END_SRC
***** projects
    #+BEGIN_SRC emacs-lisp
(defhydra hydra-projects (:color blue :columns 4 :hint nil
                                :pre (progn
                                       (exwm-input-line-mode))
                                :post (progn
                                        (exwm-input-char-mode))
                                :inherit (hydra-common/heads))
  "
                                                                     ╭────────────┐
     Files             Search          Buffer             Do         │ Projectile │
   ╭─────────────────────────────────────────────────────────────────┴────────────╯
     [_f_] file          [_sa_] ag          [_b_] switch         [_g_] magit
     [_l_] file dwim     [_sr_] rg          [_v_] show all       [_p_] switch
     [_r_] recent file   [_so_] occur       [_V_] ibuffer        [_P_] commander
     [_d_] dir           [_sR_] replace     [_K_] kill all       [_i_] info
     [_o_] other         [_st_] find tag
     [_u_] test file     [_sT_] make tags
                                                                         ╭────────┐
     Other Window      Run             Cache              Do             │ Fixmee │
   ╭──────────────────────────────────────────────────╯ ╭────────────────┴────────╯
     [_F_] file          [_U_] test        [_kc_] clear         [_x_] TODO & FIXME
     [_L_] dwim          [_m_] compile     [_kk_] add current   [_X_] toggle
     [_D_] dir           [_c_] shell       [_ks_] cleanup
     [_O_] other         [_C_] command     [_kd_] remove
     [_B_] buffer
   --------------------------------------------------------------------------------
         "

  ("p"   projectile-switch-project)
  ("sa"   counsel-projectile-ag)
  ("sr"   counsel-projectile-rg)
  ("b"   counsel-projectile-switch-to-buffer)
  ("B"   counsel-projectile-switch-to-buffer-other-window)
  ("d"   counsel-projectile-find-dir)
  ("D"   counsel-projectile-find-dir-other-window)
  ("f"   counsel-projectile-find-file)
  ("F"   counsel-projectile-find-file-other-window)
  ("l"   counsel-projectile-find-file-dwim)
  ("L"   counsel-projectile-find-file-dwim-other-window)

  ("c"   projectile-run-async-shell-command-in-root)
  ("C"   projectile-run-command-in-root)
  ("g"   hydra-git/body nil)
  ("i"   projectile-project-info)
  ("kc"  projectile-invalidate-cache)
  ("kd"  projectile-remove-known-project)
  ("kk"  projectile-cache-current-file)
  ("K"   projectile-kill-buffers)
  ("ks"  projectile-cleanup-known-projects)
  ("m"   projectile-compile-project)
  ("o"   projectile-find-other-file)
  ("O"   projectile-find-other-file-other-window)
  ("P"   projectile-commander)
  ("r"   projectile-recentf)
  ("so"   projectile-multi-occur)
  ("sR"   projectile-replace)
  ("st"   projectile-find-tag)
  ("sT"   projectile-regenerate-tags)
  ("u"   projectile-find-test-file)
  ("U"   projectile-test-project)
  ("v"   projectile-display-buffer)
  ("V"   projectile-ibuffer)

  ("X"   fixmee-mode)
  ("x"   fixmee-view-listing))

(define-key projectile-mode-map (kbd "C-c o") #'hydra-project/body)

    #+END_SRC
***** agenda
 #+BEGIN_SRC emacs-lisp
(defhydra hydra-agenda (
                        :color blue
                        :pre (progn
                               (exwm-input-line-mode))
                        :post (progn
                                (exwm-input-char-mode)))
"
                                                                                                                                                ╭────────┐
                                                                                                                                                │ Agenda │
                                                                      ╭─────────────────────────────────────────────────────────────────────────┴────────╯

                                                                       COLLECT                        [_c_] Collect Thoughts
                                                                      -----------------------------------------------------------------------------------
                                                                       PROCESS        [_r_] Reference   [_t_] Process Thoughts   [_m_] Someday/Maybe
                                                                      -----------------------------------------------------------------------------------
                                                                       ORGANIZE                       [_a_] Actions      [_p_] Projects
                                                                      -----------------------------------------------------------------------------------
                                                                       REVIEW                         [_n_] Next Tasks
                                                                       DO                             [_d_] Delegated
                                                                                                      [_w_] Waiting
                                                                                                      [_s_] Scheduled

                                                                      -----------------------------------------------------------------------------------
"

("c" counsel-org-capture nil)
("r" howm-list-all nil)
("t" org-boxes-workflow nil)
("m" my/someday nil)

("a" my/actions nil)
("p" my/projects nil)

("n" my/next-tasks nil)
("d" my/delegated nil)
("w" my/waiting nil)
("s" my/scheduled nil)



)
 #+END_SRC
***** emacs
     #+BEGIN_SRC emacs-lisp
(defhydra hydra-emacs (:color blue :hint nil :inherit (hydra-common/heads)
                              :pre (progn
                                     (exwm-input-line-mode))
                              :post (progn
                                      (exwm-input-char-mode)))

  "
                                                                       ╭───────┐
   Execute       Packages         Help                     Misc        │ Emacs │
╭──────────────────────────────────────────────────────────────────────┴───────╯
  [_x_] counsel M-x [_p_] list      [_f_] describe function [_t_] change theme
  [_e_] exit        [_i_] install   [_v_] describe variable [_l_] list emacs process
  [_s_] system      [_u_] upgrade   [_m_] info manual       [_c_] init time
   ^ ^               ^ ^            [_k_] bindings          [_o_] unbound commands
   ^ ^               ^ ^            [_b_] personal bindings [_y_] emacs colors
   ^ ^               ^ ^             ^ ^                    [_z_] list faces
   ^ ^               ^ ^             ^ ^
--------------------------------------------------------------------------------
      "
  ("C-h b" counsel-descbinds "bindings")
  ("f" counsel-describe-function)
  ("v" counsel-describe-variable)
  ("b" describe-personal-keybindings)
  ("c" emacs-init-time)
  ("i" package-install)
  ("k" counsel-descbinds)
  ("l" list-processes)
  ("m" info-display-manual)
  ("p" paradox-list-packages)
  ("t" counsel-load-theme)
  ("u" paradox-upgrade-packages)
  ("o" smex-show-unbound-commands)
  ("y" counsel-colors-emacs)
  ("z" counsel-faces)
  ("x" counsel-M-x)
  ("e" save-buffers-kill-emacs)
  ("s" hydra-system/body nil)
)
     #+END_SRC

****** system
     #+BEGIN_SRC emacs-lisp
  (defhydra hydra-system (:color blue :hint nil :inherit (hydra-common/heads)
                                 :pre (progn
                                        (exwm-input-line-mode))
                                 :post (progn
                                         (exwm-input-char-mode)))

      "
                                                                      ╭────────┐
   Terminals                     System                               │ System │
╭─────────────────────────────────────────────────────────────────────┴────────╯
  [_s_] new multi-term           [_c_] shell command
  [_n_] next multi-term          [_a_] aync shell command
  [_p_] previous multi-term      [_m_] man page
  [_d_] dedicated multi-term     [_l_] list system process
  [_e_] eshell
--------------------------------------------------------------------------------
      "
      ("a" async-shell-command)
      ("c" shell-command)
      ("e" eshell)
      ("m" man)
      ("l" proced)
      ("s" multi-term)
      ("n" multi-term-next)
      ("p" multi-term-previous)
      ("d" multi-term-dedicated-toggle))

     #+END_SRC

***** file
     #+BEGIN_SRC emacs-lisp
(defhydra hydra-file (:color blue :hint nil :inherit (hydra-common/heads)
                             :pre (progn
                                    (exwm-input-line-mode))
                             :post (progn
                                     (exwm-input-char-mode)))
  "
                                                                        ╭──────┐
     Ivy                    Dired            Hydras                     │ File │
╭───────────────────────────────────────────────────────────────────────┴──────╯
  [_f_] open file            [_d_] dired     [_ht_] text
  [_e_] open file extern                   [_hs_] spell
                                         [_hn_] narrow
                                         [_hg_] git
--------------------------------------------------------------------------------
      "
  ("f" counsel-find-file)
  ("e" counsel-find-file-extern)
  ("d" dired)
  ("hn" hydra-narrow/body nil :color blue)
  ("hs" hydra-spell/body nil  :color blue)
  ("ht" hydra-text/body nil   :color blue)
  ("hg" hydra-git/body nil   :color blue)
)
     #+END_SRC
****** narrow
     #+BEGIN_SRC emacs-lisp
(defhydra hydra-narrow (:color blue :hint nil :inherit (hydra-common/heads)
                               :pre (progn
                                      (exwm-input-line-mode))
                               :post (progn
                                       (exwm-input-char-mode)))
      "
                                                                      ╭────────┐
    Narrow                                                            │ Narrow │
╭─────────────────────────────────────────────────────────────────────┴────────╯
  [_f_] narrow to defun
  [_p_] narrow to page
  [_r_] narrow to region
  [_w_] widen
--------------------------------------------------------------------------------
      "
      ("f" narrow-to-defun)
      ("p" narrow-to-page)
      ("r" narrow-to-region)
      ("w" widen))
     #+END_SRC

****** spell
      #+BEGIN_SRC emacs-lisp
(defhydra hydra-spell (:color blue :hint nil :inherit (hydra-common/heads)
                              :pre (progn
                                     (exwm-input-line-mode))
                              :post (progn
                                      (exwm-input-char-mode)))
  "
                                                                       ╭───────┐
    Flyspell               Ispell                      Gtranslate      │ Spell │
╭──────────────────────────────────────────────────────────────────────┴───────╯
  [_k_] correct word       [_w_] check word            [_g_] en ⇆ es
  [_n_] next error                                     [_G_] any lang
  [_f_] toggle flyspell
  [_p_] toggle prog mode
--------------------------------------------------------------------------------
      "
  ("w" ispell-word)
  ("d" ispell-change-dictionary)
  ("g" google-translate-smooth-translate)
  ("G" google-translate-query-translate)
  ("f" flyspell-mode)
  ("p" flyspell-prog-mode)
  ("k" flyspell-correct-word-generic)
  ("n" flyspell-goto-next-error))
      #+END_SRC

****** text
     #+BEGIN_SRC emacs-lisp
(defhydra hydra-text (:color blue :hint nil :inherit (hydra-common/heads)
                             :pre (progn
                                    (exwm-input-line-mode))
                             :post (progn
                                     (exwm-input-char-mode)))

  "
                                                                             ╭──────┐
      Size  Toggle              Unicode                        Do            │ Text │
     ╭───────────────────────────────────────────────────────────────────────┴──────╯
       _k_  [_f_] fill column     [_d_] unicode character           [_a_] align with regex
       ^↑^  [_h_] hidden chars    [_e_] evil digraphs table         [_w_] remove trailing ' '
       ^ ^  [_l_] line numbers    [_s_] specific code block         [_n_] count words
       ^↓^  [_t_] trailing ' '    [_u_] unicode character           [_i_] lorem ipsum
       _j_  [_v_] font space      [_p_] character code              [_x_] comment box
       ^ ^  [_c_] comment          ^ ^                              [_q_] boxquote
       ^ ^  [_b_] multibyte chars  ^ ^                              [_m_] iedit (multiple)
       ^ ^   ^ ^                   ^ ^                              [_r_] expand region
       ^ ^   ^ ^                   ^ ^                              [_U_] tabs to spaces
     --------------------------------------------------------------------------------
           "
  ("a" align-regexp)
  ("b" toggle-enable-multibyte-characters)
  ("c" comment-line)
  ("d" insert-char)
  ("e" evil-ex-show-digraphs)
  ("f" fci-mode)
  ("h" whitespace-mode)
  ("i" lorem-ipsum-insert-paragraphs)
  ("k" text-scale-increase :color red)
  ("j" text-scale-decrease :color red)
  ("l" linum-mode)
  ("n" count-words)
  ("m" iedit)
  ("p" describe-char)
  ("r" er/expand-region)
  ("s" charmap)
  ("t" joe-toggle-show-trailing-whitespace)
  ("u" counsel-unicode-char)
  ("v" variable-pitch-mode)
  ("w" whitespace-cleanup)
  ("U" untabify)
  ("q" hydra-boxquote/body)
  ("x" comment-box))
     #+END_SRC

****** git
      #+BEGIN_SRC emacs-lisp
(defhydra hydra-git (:color blue :hint nil :inherit (hydra-common/heads)
                            :pre (progn
                                   (exwm-input-line-mode))
                            :post (progn
                                    (exwm-input-char-mode)))
  "
                                                                         ╭─────┐
   Magit                          VC                    Timemachine      │ Git │
╭────────────────────────────────────────────────────────────────────────┴─────╯
  [_s_] status              [_d_] diffs between revisions  [_t_] timemachine
  [_B_] blame mode          [_b_] edition history
  [_l_] file log
--------------------------------------------------------------------------------
      "
  ("B" magit-blame)
  ("b" vc-annotate)
  ("d" vc-diff)
  ("l" magit-log-buffer-file)
  ("s" magit-status)
  ("t" git-timemachine))
      #+END_SRC

**** misc
***** hydra-select
  #+BEGIN_SRC emacs-lisp
(defhydra hydra-select (:exit t :columns 4)
    "EM - Select"
    ("v" set-mark-command "Start Cursor")
    ("b" mark-whole-buffer "Whole buffer")
    ("f" mark-defun "Function")
    ("-" em/set-mark-first-char "Start First char")
    ("_" em/set-mark-line-start "Start Line")
    ("l" em/set-mark-line "Current Line")
    ("p" er/mark-inside-pairs "Pairs / Parenthesis")
    ("t" (lambda () (interactive)(set-mark (point))(isearch-forward)) "Till")
    ("w" er/mark-word "Word / Symbol")
    ("s" mc--mark-symbol-at-point "Word / Symbol"))
  #+END_SRC
***** hydra-minor
 #+BEGIN_SRC emacs-lisp
 (defhydra hydra-minor (:exit t :columns 4)
     "Minor modes"
     ("r" spray-mode "Speed read")
     ("n" em/narrow-or-widen-dwim "Narrow / Widen")
     ("i" iedit-mode "Iedit mode"))
 #+END_SRC
***** hydra-move
  #+BEGIN_SRC emacs-lisp
(defhydra hydra-move (:exit t :columns 4)
     "EM - Move (travel) text"
     ("u" (transpose-lines 1) "Up")
     ("d" (transpose-lines -1) "Down")
     ("i" indent-according-to-mode "Indent obeying mode")
     ("l" lispy-forward-slurp-sexp "Slurp left")
     ("L" lispy-backwards-slurp-sexp "Slurp right")
     ("b" lispy-forward-slurp-sexp "Barf left")
     ("B" lispy-backwards-slurp-sexp "Barf ritgh"))
  #+END_SRC
***** hydra-wrap
 #+BEGIN_SRC emacs-lisp
(defhydra hydra-wrap (:exit t :columns 4)
    "EM - wrap"
    ("q" em/sp-quote-symbol "Quote symbol"))
 #+END_SRC
***** hydra-delete
 #+BEGIN_SRC emacs-lisp
(defhydra hydra-delete (:exit t :columns 4)
  "EM - Delete / Cut shortcuts"
  ("$" kill-line "Till line end")
  ("d" whole-line-or-region-kill-region "Whole line")
  ("w" kill-word "Current word")
  ("r" kill-region "Delete Region")
  ("s" sp-kill-symbol "Current symbol")
  ("c" delete-char "Current character")
  ("<SPC>" fixup-whitespace "Delete spaces")
  ("f" em-delete-function "Till charater")
  ("i" em-delete-inside "Inside")
  ("u" zop-up-to-char "Untill charater")
  ("\"" objed-kill-string "Kill String")
  ("U" (zop-up-to-char -1) "Untill backwards")
  ("a" zop-to-char "After character")
  ("A" (zop-to-char -1) "After character backwards"))
 #+END_SRC
***** hydra-paste
 #+BEGIN_SRC emacs-lisp
(defhydra hydra-paste (:exit t :columns 4)
  "EM - Paste"
  ("p" yank "Paste")
  ("s" (yank-pop -1) "Pop")
  ("l" my/exwm-counsel-yank-pop "History")
)



 #+END_SRC
***** hydra-copy
 #+BEGIN_SRC emacs-lisp
(defhydra hydra-copy (:exit t :columns 4)
  "EM - Copy"
  ("c" whole-line-or-region-copy-region-as-kill "Line / Region")
  ("s" em/copy-symbol "Symbol")
  ("i" em-copy-inside "Inside")
  ("p" em-pop-paste "Paste Previous")
  ("w" sp-kill-word "Word")
  ("b" em-copy-all "Buffer")
  ("f" em-copy-function "Function")
  ("d" em-duplicate-line "Duplicate line"))

 #+END_SRC
***** DISABLED hydra-applications
 #+BEGIN_SRC emacs-lisp
  (defhydra hydra-applications (:exit t :columns 4)
    "EM - Applications"
    ("p" counsel-list-processes "Show Processes")
    ("r" elfeed "RSS Feeds"))

  (defhydra hydra-elfeed-search-mode (:exit t :columns 4)
    "EM - Elfeed"
    ("f" elfeed-search-fetch "Fetch feed")
    ("u" elfeed-search-update "Update feed")
    ("o" elfeed-search-show-entry "Show entry"))


 #+END_SRC
***** hydra-help
 #+BEGIN_SRC emacs-lisp
  (defhydra hydra-help (:exit t :columns 4)
    "EM - Help"
    ("f" counsel-apropos "Function search")
    ("k" view-lossage "View Keystrokes")
    ("c" find-function "Function code")
    ("P" esup "Profile")
    ("h" helpful-at-point "Help at point")
    ("p" find-function-at-point "Function at Point")
    ("l" find-library "Library source"))

 #+END_SRC
*** TODO key-chord
#+BEGIN_SRC emacs-lisp
 (use-package key-chord
   :ensure t
   :config
   (key-chord-define boon-command-map "jj" 'avy-goto-word-1)
   (key-chord-define boon-command-map "jl" 'avy-goto-line)
   (key-chord-define boon-command-map "jk" 'avy-goto-char)
   (key-chord-define boon-command-map "JJ" 'crux-switch-to-previous-buffer)
   (key-chord-define boon-command-map "uu" 'undo-tree-visualize)
   (key-chord-define boon-command-map "xx" 'counsel-M-x)
   (key-chord-define boon-command-map "yy" 'counsel-yank-pop)
   (key-chord-define boon-command-map "  " ". ")

   (let
       ((sub-keymap (make-sparse-keymap)))
     (define-key sub-keymap "a" 'org-agenda)
     (define-key sub-keymap "c" 'org-capture)
     (key-chord-define boon-command-map "cc" sub-keymap)))



(use-package bind-chord)
(use-package use-package-chords)
#+END_SRC
* TODO Emacs Maintenance
** HOLD Keybindings to map                                             :HOLD:
Keybindings to assign
*** TODO indent-according-to-mode
*** TODO ivy-push-view
*** TODO ivy-pop-view
*** TODO ivy-switch-view
** HOLD Setup ox-reveal                                                :HOLD:
** HOLD Create org file that use org-babel to make a backup of dotfiles and tangling them back to their destinations :HOLD:
   :PROPERTIES:
   :TASK:
   :ID:       c407f939-5ce0-4635-98e3-1a77e894bfb4
   :END:
   :LOGBOOK:
   - State "TODO"       from "HOLD"       [2019-04-08 Mon 15:58]
   - State "HOLD"       from "TODO"       [2019-04-02 Tue 11:41]
   - State "TODO"       from "HOLD"       [2019-04-02 Tue 09:49]
   - State "HOLD"       from "TODO"       [2019-03-30 Sat 07:32]
   - State "TODO"       from "HOLD"       [2019-03-26 Tue 09:36]
   :EN:D
** HOLD Include Steup items for tasks: Context, Time, Energy, Priority, Topic :HOLD:
   :PROPERTIES:
   :CREATED:  <2019-05-01 Wed 12:15>
   :ID:       de807d7d-1b97-499c-8b02-3ec8fa262c5f
   :END:
 :LOGBOOK:
 CLOCK: [2019-05-01 Wed 12:14]--[2019-05-01 Wed 12:15] =>  0:01
 :END:

** HOLD Define context-aware keys in Emacs                             :HOLD:
   :PROPERTIES:
   :ID:       d4f4f43b-cee1-4fb3-a153-46b6ee06a70f
   :END:
[[http://endlessparentheses.com/define-context-aware-keys-in-emacs.html][Define context-aware keys in Emacs · Endless Parentheses]]



 :RELATED:
 :END:

 :RESOURCES:
 :END:
** HOLD Configure eink screen                                         :HOLD:
*** TODO Customize poet theme to be compatible with eink screen
    :PROPERTIES:
    :CREATED:  <2019-05-20 Mon 21:50>
    :ID:       9f89ab79-6db4-488e-9c43-8a689f1df915
    :END:
*** TODO Review [[https://github.com/mnp/dispwatch][GitHub - mnp/dispwatch: Emacs - Watch the current display for changes (ie plu...]]
    :PROPERTIES:
    :CREATED:  <2019-05-20 Mon 22:18>
    :ID:       36e7f0b0-73ee-4b64-8aa4-3ba2b474c4be
    :END:
    :LOGBOOK:
    CLOCK: [2019-05-20 Mon 22:18]--[2019-05-20 Mon 22:19] =>  0:01
    :END:
** HOLD create summary of emacs tools / workflows                      :HOLD:
   :PROPERTIES:
   :CREATED:  <2019-05-20 Mon 23:47>
   :ID:       b5b83d63-343b-4034-85c7-94e77492fbca
   :END:
** HOLD EXWM and keychord                                              :HOLD:
   :PROPERTIES:
   :CREATED:  <2019-05-29 Wed 11:21>
   :ID:       760ddd05-c598-481e-9e09-5142a8821507
   :END:
   :LOGBOOK:
   CLOCK: [2019-05-29 Wed 11:21]--[2019-05-29 Wed 11:22] =>  0:01
   :END:
[[https://github.com/eush77/dotfiles/blob/7b0d623b03d1884d26c2b2e873bd1e366e61cbbf/emacs/.emacs.d/config/config-exwm.el][dotfiles/config-exwm.el at 7b0d623b03d1884d26c2b2e873bd1e366e61cbbf · eush77/...]]
** HOLD Annotate integration                                           :HOLD:
   :PROPERTIES:
   :CREATED:  <2019-05-29 Wed 18:50>
   :ID:       9761afec-2974-4687-9aa0-d86f89a1ddc0
   :END:
[[https://github.com/bastibe/annotate.el#start-of-content][GitHub - bastibe/annotate.el: Annotate.el]]
** HOLD Create reference cards                                         :HOLD:
   :PROPERTIES:
   :CREATED:  <2019-05-31 Fri 08:55>
   :ID:       e0fea4d8-cea3-408d-8663-f293e9396e6d
   :END:
   :LOGBOOK:
   CLOCK: [2019-05-31 Fri 08:55]--[2019-05-31 Fri 08:56] =>  0:01
   :END:
[[https://github.com/alhassy/CheatSheet#getting-started][GitHub - alhassy/CheatSheet: Pretty cheat sheets, or ``reference cards'', obt...]]
** HOLD Set up vimium keybindings to mimic boon-mode                   :HOLD:
   :PROPERTIES:
   :CREATED:  <2019-05-31 Fri 20:59>
   :ID:       62c4b973-31b2-4a4c-bba3-ea06395c6e63
   :END:
** HOLD [[https://www.reddit.com/r/emacs/comments/9ewti1/share_a_trick_of_keychord_usage_for_laptop_user/][Using Key-Chord with a laptop]]                                  :HOLD:
** DONE Setup boon keybindings for the insert and normal mode that has objed mode as part of it
#+BEGIN_SRC emacs-lisp :tangle no
(defun my/objed-mode ()
(interactive)
(boon-mode -1)
(objed-mode +1)
(objed-activate))

(defun my/boon-set-command-state ()
(interactive)
(message "boon-mode")
(boon-mode +1))


#+END_SRC
** DONE Read over documentation of objed
